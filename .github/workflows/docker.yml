name: Android Build

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Android App
    runs-on: ubuntu-latest-8-cores

    env:
      VERSION_NAME: "7.40.2"
      CI_DEBUG_TRACE: "true"
      ANDROID_HOME: /opt/android-sdk
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEYSTORE: ${{ secrets.KEYSTORE }}
      KEYSTORE_PATH: /tmp/keystore.jks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git wget unzip

      - name: Download and set up Android command line tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O /tmp/cli-tools.zip
          unzip -q /tmp/cli-tools.zip -d /tmp/cli-tools
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          mv /tmp/cli-tools/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest
          
          echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV

      - name: Install Android SDK components
        run: |
          sdkmanager --sdk_root=$ANDROID_HOME --update
          yes | sdkmanager --sdk_root=$ANDROID_HOME \
            "platform-tools" \
            "platforms;android-35" \
            "build-tools;35.0.0" \
            "extras;google;m2repository" \
            "extras;android;m2repository" \
            "extras;google;google_play_services" \
            "ndk;28.0.13004108" \
            "cmake;3.22.1"
          yes | sdkmanager --sdk_root=$ANDROID_HOME --licenses

      - name: Decode keystore from base64 and save
        run: |
          echo "$KEYSTORE" | base64 --decode > /tmp/keystore.jks
          echo "KEY_ALIAS=$KEY_ALIAS"
          echo "STORE_PASSWORD=$STORE_PASSWORD"
          ls -l /tmp/keystore.jks

      - name: Build with Gradle
        run: |
            ./gradlew clean assemblePlayStagingDebug
            ./gradlew --stop



      - name: Copy libsignal
        run: |
          LIBSIGNAL_PATH=$(find ~/.gradle/caches/modules-2/files-2.1/org.signal/libsignal-android -name 'libsignal*.aar' -exec dirname {} \; )
           curl -L https://tap-bucket-sg1.s3.ap-southeast-1.amazonaws.com/libsignal-android-0.69.1.aar -o $LIBSIGNAL_PATH/libsignal-android-0.69.1.aar

      - name: Build with staging
        run: ./gradlew clean assemblePlayStagingDebug

      - name: Build with prod
        run: ./gradlew assemblePlayProdRelease -PKEYSTORE_PATH=/tmp/keystore.jks -PSTORE_PASSWORD=${{ secrets.STORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.STORE_PASSWORD }}

      - name: Build file aab
        run: ./gradlew bundlePlayProdRelease -PKEYSTORE_PATH=/tmp/keystore.jks -PSTORE_PASSWORD=${{ secrets.STORE_PASSWORD }} -PKEY_ALIAS=${{ secrets.KEY_ALIAS }} -PKEY_PASSWORD=${{ secrets.STORE_PASSWORD }}


      - name: Prepare APK for upload
        run: |
          mkdir -p upload-apk
          cp app/build/outputs/apk/playStaging/debug/Signal-Android-play-staging-universal-debug-${{ env.VERSION_NAME }}.apk upload-apk
          cp app/build/outputs/apk/playProd/release/Signal-Android-play-prod-universal-release-${{ env.VERSION_NAME }}.apk upload-apk
          cp app/build/outputs/bundle/playProdRelease/Signal-Android-play-prod-release.aab upload-apk

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: play-prod-staging-apk
          path: upload-apk/
          retention-days: 7
